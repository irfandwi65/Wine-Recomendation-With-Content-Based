# -*- coding: utf-8 -*-
"""SISREK (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_f_6M9CVmyZHYVJkCU7i7ScugFFqXnvr

# WINE RECOMMENDATION SYSTEM
![alt text](https://static.londonwinecompetition.com/en/blog/images/w/2280/LondonWineCompetition-01272020122441000000-5e2ed689517ff.jpg)

### LIBRARY
"""

import pandas as pd

"""### DATASET"""

data = 'Wine_Dataset_2.csv'
df = pd.read_csv(data, engine='python', error_bad_lines=False, delimiter=",")
df = df.drop(df.columns[[0]],axis=1)
df.head()

"""### FILTER DATASET"""

df = df.filter(items=['title', 'taster_name', 'points'])
df

"""### NORMALISASI DATASET"""

df = df.dropna(how='any',axis=0)
df = df[~df.title.str.contains(r'[^\x00-\x7F]')]
df = df[~df.taster_name.str.contains(r'[^\x00-\x7F]')]
df

"""### PERUBAHAN INDEX DATASET SESUAI TITLE WINE DAN NAMA TASTER"""

df_index = df.set_index([ 'title', 'taster_name'])
df_index.head()

"""### PEMBUATAN DICTIONARY DARI DATASET"""

df_dict = (df.groupby('taster_name')['title','points'].apply(lambda Func: dict(Func.values)).to_dict())
df_dict

"""### FUNGSI EUCLID DISTANCE"""

def Euclid_Dist(Sim,Taster_X,Taster_Y):
    data = {} 

    for Wine in Sim[Taster_X]:
        if Wine in Sim[Taster_Y]:
            data[Wine]=1    

    if len(data) == 0: 
        return 0

    Total_Sum = sum([pow(Sim[Taster_X][Wine] - Sim[Taster_Y][Wine],2) 
                          for Wine in Sim[Taster_X] if Wine in Sim[Taster_Y]])
    return 1/(1+Total_Sum)

"""### FUNGSI PEERS SIMILARTY"""

def Peers_Sim(Wine, Taster, n=10, similarity = Euclid_Dist):
    Peers = [(round(similarity(Wine,Taster,other)*100,2), other)
            for other in Wine if other!=Taster]
          
    Peers.sort()
    Peers.reverse()

    print ('Presentase Kemiripan, Taster')
    return (Peers[0:n])

"""### PEERS SIMILARITY PAUL GREGUTT"""

Peers_Sim(df_dict, 'Paul Gregutt')

"""### FUNGSI SISTEM REKOMENDASI"""

def RecommendationOnPeers(Peers, Taster, n=15, similarity = Euclid_Dist):
    data = {} 
    sums = {}

    for other in Peers:
        if other == Taster:
            continue
        sim = similarity(Peers, Taster, other)

        if sim <= 0:
            continue
        for item in Peers[other]:
            if item not in Peers[Taster] or Peers[Taster][item] == 0:
                data.setdefault(item,0) 
                data[item] += Peers[other][item] * sim
                sums.setdefault(item,0)
                sums[item] += sim
                
    BooksRecomm = [(round(total/sums[item],2), item) for item, total in data.items()]
    BooksRecomm.sort()
    BooksRecomm.reverse()

    print ('Prosentase Rekomendasi berdasarkan Peers, Nama Wine' )
    return BooksRecomm[0:n]

"""### REKOMENDASI WINE DARI PAUL GREGUTT"""

RecommendationOnPeers(df_dict, 'Paul Gregutt')

